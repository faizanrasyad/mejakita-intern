// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace BerbagiCatatanSwagger.Models;

public partial class BerbagiCatatanContext : DbContext
{
    public BerbagiCatatanContext(DbContextOptions<BerbagiCatatanContext> options)
        : base(options)
    {
    }

    public virtual DbSet<bookmark> bookmarks { get; set; }

    public virtual DbSet<catatan> catatans { get; set; }

    public virtual DbSet<image> images { get; set; }

    public virtual DbSet<komentar> komentars { get; set; }

    public virtual DbSet<like> likes { get; set; }

    public virtual DbSet<refreshToken> refreshTokens { get; set; }

    public virtual DbSet<user> users { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<bookmark>(entity =>
        {
            entity.ToTable("bookmark");

            entity.HasOne(d => d.catatan).WithMany(p => p.bookmarks)
                .HasForeignKey(d => d.catatanId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_bookmark_catatan");

            entity.HasOne(d => d.user).WithMany(p => p.bookmarks)
                .HasForeignKey(d => d.userId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_bookmark_user");
        });

        modelBuilder.Entity<catatan>(entity =>
        {
            entity.ToTable("catatan");

            entity.Property(e => e._private).HasColumnName("private");
            entity.Property(e => e.description)
                .IsRequired()
                .HasColumnType("text");
            entity.Property(e => e.name)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);

            entity.HasOne(d => d.authorNavigation).WithMany(p => p.catatans)
                .HasForeignKey(d => d.author)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_catatan_user");
        });

        modelBuilder.Entity<image>(entity =>
        {
            entity.Property(e => e.image1)
                .IsRequired()
                .HasColumnType("text")
                .HasColumnName("image");

            entity.HasOne(d => d.catatan).WithMany(p => p.images)
                .HasForeignKey(d => d.catatanId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_images_catatan");
        });

        modelBuilder.Entity<komentar>(entity =>
        {
            entity.ToTable("komentar");

            entity.Property(e => e.komentar1)
                .IsRequired()
                .HasColumnType("text")
                .HasColumnName("komentar");

            entity.HasOne(d => d.catatan).WithMany(p => p.komentars)
                .HasForeignKey(d => d.catatanId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_komentar_catatan");

            entity.HasOne(d => d.user).WithMany(p => p.komentars)
                .HasForeignKey(d => d.userId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_komentar_user");
        });

        modelBuilder.Entity<like>(entity =>
        {
            entity.ToTable("like");

            entity.HasOne(d => d.catatan).WithMany(p => p.likes)
                .HasForeignKey(d => d.catatanId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_like_catatan");

            entity.HasOne(d => d.user).WithMany(p => p.likes)
                .HasForeignKey(d => d.userId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_like_user");
        });

        modelBuilder.Entity<refreshToken>(entity =>
        {
            entity.ToTable("refreshToken");

            entity.Property(e => e.token)
                .IsRequired()
                .HasColumnType("text");
        });

        modelBuilder.Entity<user>(entity =>
        {
            entity.ToTable("user");

            entity.Property(e => e.name)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.password)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.username)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}